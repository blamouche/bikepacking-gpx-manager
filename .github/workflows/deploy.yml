name: Deploy via FTP

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install lftp
        run: sudo apt-get update && sudo apt-get install -y lftp

      - name: Deploy with zero downtime
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_PORT: ${{ secrets.FTP_PORT }}
          FTP_PASSIVE: ${{ secrets.FTP_PASSIVE }}
        run: |
          set -euo pipefail
          SERVER_DIR="apps/cyclingcompanion"
          STAGING_DIR="${SERVER_DIR}_next"
          BACKUP_DIR="${SERVER_DIR}_prev"
          LOCAL_DIR="."

          PORT_ARG=""
          if [[ -n "${FTP_PORT:-}" ]]; then
            PORT_ARG=":${FTP_PORT}"
          fi

          # Configuration lftp
          cat <<'EOF' > deploy.lftp
          set ftp:ssl-force false
          set ftp:ssl-allow yes
          set ssl:verify-certificate false
          set cmd:fail-exit true
          set net:max-retries 3
          set net:timeout 30
          set ftp:charset utf8
          EOF

          # Configuration du mode passif si spécifié
          if [[ -n "${FTP_PASSIVE:-}" ]]; then
            printf 'set ftp:passive-mode %s\n' "${FTP_PASSIVE}" >> deploy.lftp
          fi

          # Commandes de déploiement
          {
            printf 'open -u %s,%s %s\n' "${FTP_USERNAME}" "${FTP_PASSWORD}" "${FTP_SERVER}${PORT_ARG}"
            
            # Création du répertoire de staging
            printf 'mkdir -f %s\n' "${STAGING_DIR}"
            
            # Synchronisation des fichiers
            printf 'mirror -R --delete --only-newer --parallel=2 --verbose %s %s' "${LOCAL_DIR}" "${STAGING_DIR}"
            printf ' --exclude-glob=.git/'
            printf ' --exclude-glob=.github/'
            printf ' --exclude-glob=node_modules/'
            printf ' --exclude-glob=.DS_Store'
            printf ' --exclude-glob=README.md'
            printf ' --exclude-glob=deploy.lftp'
            printf ' --exclude-glob=*.log\n'
            
            # Nettoyage de l'ancien backup
            printf 'rm -rf %s || echo "No previous backup to remove"\n' "${BACKUP_DIR}"
            
            # Déplacement atomique avec gestion d'erreur
            printf 'set cmd:fail-exit false\n'
            printf 'mv %s %s || echo "No current version to backup"\n' "${SERVER_DIR}" "${BACKUP_DIR}"
            printf 'set cmd:fail-exit true\n'
            
            # Activation de la nouvelle version
            printf 'mv %s %s\n' "${STAGING_DIR}" "${SERVER_DIR}"
            
            # Vérification que le déploiement a réussi
            printf 'ls -la %s\n' "${SERVER_DIR}"
            
            printf 'bye\n'
          } >> deploy.lftp

          # Exécution du script lftp
          echo "=== Début du déploiement ==="
          cat deploy.lftp
          echo "=== Exécution ==="
          lftp -f deploy.lftp
          
          # Nettoyage
          rm -f deploy.lftp
          
          echo "=== Déploiement terminé avec succès ==="